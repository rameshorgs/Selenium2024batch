Operators
--------
operator is a symbol which will perform an operation.

int a=10;
int b=20;

int c=a+b;

a,b are called operands
+ = operators

Types of operators
----------------
1) Arithmetic operators   + - * / %
2) Relational/comparison operators  >  >=  <  <=  !=  ==
3) Logical operators   &&   ||  !
4) Increment & Decrement operators  ++  --
5) Assignment   =   +=   -=   *= /=  %=
6) conditional/ternary operator  ?:

Unary Operators: ++  -- =   +=   -=   *= /=  %=  !
Binary operators: + - * / % >  >=  <  <=  !=  ==  &&   ||
ternary operator:   ?:


Looping statements
-------------

loop  or iteration -  executing same set of statements multiple times.

1) while
2) do while
3) for loop


Initilization
condition
incrementation

Conditions

If
if else
Nested If

If Syntax

if(condition){
//code to be executed
}

int a =10;
int b=20

a>b
a<b
a=b

if else

Single  if and else
if(condition){
//code to be executed
}
else{
}


if(condition)
vkjvdv

vrre
v
vre
vr
vvr

Multiple Condition


if(Condition ){

}
else if(Condition){

}

else if(Condition){

}
else{

}

Switch

whenever we need to  excute one statement with multiple conditions


Syntax

switch(expression){

case value1:
 //code to be executed;
 break;  //optional
case value2:
 //code to be executed;
 break;  //optional
......

default:
  code to be executed if all cases are not matched;
}



For Loop

To iterate a program serveral times  based on some condition  with defined number of iteration

Syntax

for(initialization; condition; increment/decrement){
//statement or code to be executed
}


for(int i=1;i<=10;i++){

}

for(data_type variable : array_name){
//code to be executed
}    

Syntax of while

while(condition)
{
statements;
}



do
{
statements;
}while(condition);


for(initilization; condition ; inc/dec )
{
statements;
}


** which loop is prefered to use
-----
* If you know the number of iterations in advance, the for loop is often the most suitable.
* If you want to execute the loop at least once, the do-while loop is appropriate.
* If you are uncertain about the number of iterations and the loop termination is based on a condition, the while loop is a good choice.


Bike --> for
bus -- > do while
flight ----> while

Jumping statements
----------
break
continue


control statements
-------
conditional ----> if   if--else   switch case
loops ----------> while    do-while   for
jump ------------> break  continue




Create family with 4 packages with family grandfather , Father  and son

Family
      grandafather
      father
      son

      Here 75  and son name as variable

 Print the statement in the grandafather class as

 granfather " "Krishna" age is 75 and my property goes to "tirupalu" "

 father  "tirupalu has "3" children  and names "chndra" "sunitha" and "pooja"

 son  "Chandra" am active and enthuism person in "agriculture" and habbit of swimming  and my is "26"

 family === MAIN METHOD === YOU NEED CALL ALL THE CLASS AND PRINT THE METHODS

 Practice bitwise operator topics .


 Assignement
 write the program of ifelse based flow chart
 Print the Months when user given number 1 to 12.


Array :

 an array is a collection of similar type of elements

 int arr1[]; declaration of array

 int arr2[]={1,2,3,4,5,6}; //declare and intialization of array

 int arr3[]=new int[6];

 arr3[0]=1;
 arr[1]=2;
 arr[2]=3;
 arr[3]=20;
 arr[4]=50;
 arr[5]=60;
 arr[6]=70;


 String arr4[]={"Ramesh,"Altaf,"anusha","Kiran"};

 String arr5[]=new String["Ramesh,"Altaf,"anusha","Kiran"]

 Different types of the array

 Single Dimentional array
 Multi dimentionl array

 int arr[][]=new int[2][3] //2*3

 arr[0][0]=1;
 arr[0][1]=30;
 arr[0][2]=50;
 arr[1][0]=60;
 arr[1][1]=80;
 arr[1][2]90;




Caracter=  [ram,rami,engneer, team lead , friend ]

Family ={father ,mother , brother , sister }

age = {55,45,25,21]

Switch  charc

    case husband

     i am husband of my wife

     case father

     i am son of my

     case brother


     if (name= arr[i])
     {
     print  age  + 55
     }
     elsename  {
     print age +
     }


Constructor

 a constructor is a block of codes similar to the method.
 It is called when an instance of the class is created. At the time of calling constructor.

 There are two rules defined for the constructor.

 Constructor name must be the same as its class name
 A Constructor must have no explicit return type
 A Java constructor cannot be abstract, static, final, and synchronized

 default parmeterized Constructor
 Parameterized Constructor

we are constructing the data while creating the Object is called constructor

  class Constructorex{

  public void m1(){

  }

  public void m2(){ // Normal Method

  }

  public  Constructorex(){ // constructor Method

  }

public String Constructorex(){ //not a  constructor Method

  }

  Main(){

  Constructorex con= new Constructorex();

  con.m2();


  }

  }


Inheritance

Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.

Class  classname extends anotherclassname{

//classname is Subclass  and anotherclassname is super class

}

class grandfather (){

public void property(){
sop("20 acres land ");
}


}

class father extends grandfather(){

public void myproperty(){
property();

}
main(){

}
}



String

String is collection of characters and declared in double quotes and immutable

String is non primitive data type  Array  is non primitive data type

String is a class ; lot of methods with lot of properties

String value="Ramesh"; // IMmutable

String value = new String("Ramesh") // parameterized constructor


This Keyword

Reference Varaiable that referes to current object


1) this: to refer current class instance variable
2) this: to invoke current class method
3) this() : to invoke current class constructor

Super :

it used to immediate parent class
                                                                               
TYpe Casting

Widening casting
Narrow caSting


Exception handling

  Try
  catch
  finally


Sysntax

try {
  //  if user thought their might me some wrong in  logic
}
catch(Exception e) {
  // give the exception

}


1) Checked Exception
The classes that directly inherit the Throwable class except RuntimeException and Error are known as checked exceptions.
For example, IOException, SQLException, etc. Checked exceptions are checked at compile-time.

2) Unchecked Exception
The classes that inherit the RuntimeException are known as unchecked exceptions.
For example, ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc.
Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

3) Error
Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc

ClassNotFoundException: This Exception is raised when we try to access a class whose definition is not found
FileNotFoundException: This Exception is raised when a file is not accessible or does not open.
IOException: It is thrown when an input-output operation failed or interrupted
InterruptedException: It is thrown when a thread is waiting, sleeping, or doing some processing, and it is interrupted.


ArithmeticException: It is thrown when an exceptional condition has occurred in an arithmetic operation.
ArrayIndexOutOfBoundsException: It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.
NoSuchFieldException: It is thrown when a class does not contain the field (or variable) specified
NoSuchMethodException: It is thrown when accessing a method that is not found.
NullPointerException: This exception is raised when referring to the members of a null object. Null represents nothing
NumberFormatException: This exception is raised when a method could not convert a string into a numeric format.
RuntimeException: This represents an exception that occurs during runtime.
StringIndexOutOfBoundsException: It is thrown by String class methods to indicate that an index is either negative or greater than the size of the string
IllegalArgumentException : This exception will throw the error or error statement when the method receives an argument which is not accurately fit to the given relation or condition. It comes under the unchecked exception.
IllegalStateException : This exception will throw an error or error message when the method is not accessed for the particular operation in the application. It comes under the unchecked exception.


I/O

Byte Stream
  Java InputStream Class
  Java OutputStream Class
Character Stream
    Java Reader Class
    Java Writer Class



String = "Ramesh is teach Java class on Saturday";

// Mark method in input output streams













